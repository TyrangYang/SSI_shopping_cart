{"version":3,"sources":["components/ProductListItem.jsx","components/Checkout.jsx","components/ProductList.jsx","App.js","serviceWorker.js","index.js"],"names":["ProductListItem","product","changeProductQuantity","deleteProduct","className","src","image","alt","name","description","id","value","quantity","onChange","e","target","discount","Math","ceil","price","icon","faTrashAlt","onClick","window","confirm","faSyncAlt","Checkout","setShowCheckout","useState","formDisplay","setFormDisplay","payPalDisplay","setPayPalDisplay","bankAccountDisplay","setBankAccountDisplay","Container","maxWidth","Button","variant","color","fullWidth","style","display","onSubmit","preventDefault","console","dir","TextField","placeholder","label","required","type","replace","trim","inputProps","minLength","maxLength","FormGroup","row","pattern","FormControlLabel","control","Checkbox","ProductList","allProducts","setAllProducts","isLoaded","setIsLoaded","showCheckout","useEffect","fakeData","forEach","totalPrice","useMemo","reduce","prev","cur","newAllProducts","map","filter","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70b2d834.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/ProductListItem.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faSyncAlt } from '@fortawesome/free-solid-svg-icons';\n\nexport default function ProductListItem({\n    product,\n    changeProductQuantity,\n    deleteProduct,\n}) {\n    const handleQuantityChange = (e) => {\n        changeProductQuantity(product.id, +e.target.value);\n    };\n\n    const clickDeleteButton = () => {\n        if (window.confirm('delete?')) {\n            deleteProduct(product.id);\n        }\n    };\n\n    const clickRefreshButton = () => {\n        changeProductQuantity(product.id, 1);\n    };\n\n    return (\n        <tr className=\"productListItem\">\n            <td className=\"productContent\">\n                <img src={product.image} alt=\"?\" />\n                <h1>{product.name}</h1>\n                <p>{product.description}</p>\n            </td>\n            <td>\n                <select\n                    name=\"quantity\"\n                    id=\"item-quantity\"\n                    value={'' + product.quantity}\n                    onChange={handleQuantityChange}\n                >\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </td>\n            <td>\n                <p>\n                    {product.discount === 0\n                        ? 'N/A'\n                        : `${product.discount * 100}%off`}\n                </p>\n            </td>\n            <td>\n                <p>\n                    ${Math.ceil(product.price * product.quantity * 100) / 100}\n                </p>\n            </td>\n            <td>\n                <div className=\"actionBoard\">\n                    <FontAwesomeIcon\n                        icon={faTrashAlt}\n                        onClick={clickDeleteButton}\n                        className=\"actionBtn\"\n                    />\n                    <FontAwesomeIcon\n                        icon={faSyncAlt}\n                        onClick={clickRefreshButton}\n                        className=\"actionBtn\"\n                    />\n                </div>\n            </td>\n        </tr>\n    );\n}\n","import React, { useState } from 'react';\nimport '../css/checkout.css';\n\nimport {\n    Container,\n    Button,\n    TextField,\n    FormGroup,\n    Checkbox,\n    FormControlLabel,\n} from '@material-ui/core';\n\nexport default function Checkout({ setShowCheckout }) {\n    const [formDisplay, setFormDisplay] = useState(true);\n    const [payPalDisplay, setPayPalDisplay] = useState(false);\n    const [bankAccountDisplay, setBankAccountDisplay] = useState(false);\n    return (\n        <div\n            className=\"checkoutCardContainer\"\n            onClick={(e) => {\n                if (e.target.className === 'checkoutCardContainer')\n                    setShowCheckout(false);\n            }}\n        >\n            <Container maxWidth=\"sm\" className=\"checkoutCard\">\n                <h1>CHECKOUT</h1>\n\n                <ul>\n                    <li>\n                        <Button\n                            variant={formDisplay ? 'contained' : 'outlined'}\n                            color=\"primary\"\n                            onClick={() => {\n                                setFormDisplay(true);\n                                setPayPalDisplay(false);\n                                setBankAccountDisplay(false);\n                            }}\n                            fullWidth\n                        >\n                            Credit Card\n                        </Button>\n                    </li>\n                    <li>\n                        <Button\n                            variant={payPalDisplay ? 'contained' : 'outlined'}\n                            color=\"primary\"\n                            onClick={() => {\n                                setFormDisplay(false);\n                                setPayPalDisplay(true);\n                                setBankAccountDisplay(false);\n                            }}\n                            fullWidth\n                        >\n                            PayPal\n                        </Button>\n                    </li>\n                    <li>\n                        <Button\n                            variant={\n                                bankAccountDisplay ? 'contained' : 'outlined'\n                            }\n                            color=\"primary\"\n                            onClick={() => {\n                                setFormDisplay(false);\n                                setPayPalDisplay(false);\n                                setBankAccountDisplay(true);\n                            }}\n                            fullWidth\n                        >\n                            Bank Transfer\n                        </Button>\n                    </li>\n                </ul>\n\n                <div\n                    className=\"creditCardFormContainer\"\n                    style={{\n                        display: formDisplay ? 'flex' : 'none',\n                    }}\n                >\n                    <form\n                        onSubmit={(e) => {\n                            e.preventDefault();\n                            console.dir(e.target);\n                        }}\n                    >\n                        <TextField\n                            id=\"creditCard-name\"\n                            name=\"creditCard-name\"\n                            placeholder=\"Enter FullName\"\n                            label=\"Null Name:\"\n                            required\n                        />\n                        <TextField\n                            id=\"creditCard-card-num\"\n                            name=\"creditCard-card-num\"\n                            placeholder=\"Enter A Card Number\"\n                            type=\"tel\"\n                            label=\"Card number:\"\n                            onChange={(e) => {\n                                // add a space between every four digit\n                                e.target.value = e.target.value\n                                    .replace(/\\W/gi, '')\n                                    .replace(/(.{4})/g, '$1 ')\n                                    .trim();\n                            }}\n                            inputProps={{\n                                minLength: 19,\n                                maxLength: 19,\n                            }}\n                            required\n                        />\n\n                        <FormGroup row>\n                            <TextField\n                                id=\"creditCard-month\"\n                                name=\"creditCard-month\"\n                                placeholder=\"MM\"\n                                type=\"tel\"\n                                inputProps={{\n                                    minLength: 2,\n                                    maxLength: 2,\n                                    pattern: '0[1-9]|1[0,1,2]',\n                                }}\n                                label=\"Month\"\n                                required\n                            />\n                            <TextField\n                                id=\"creditCard-year\"\n                                name=\"creditCard-year\"\n                                placeholder=\"YY\"\n                                type=\"tel\"\n                                inputProps={{\n                                    minLength: 2,\n                                    maxLength: 2,\n                                    pattern: '[0-9][0-9]',\n                                }}\n                                label=\"Year\"\n                                required\n                            />\n                        </FormGroup>\n\n                        <TextField\n                            id=\"creditCard-CCV\"\n                            name=\"creditCard-CCV\"\n                            placeholder=\"CCV\"\n                            type=\"tel\"\n                            label=\"CCV:\"\n                            inputProps={{\n                                minLength: 3,\n                                maxLength: 3,\n                                pattern: '\\\\d{3}',\n                            }}\n                            required\n                        />\n\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    name=\"creditCard-Agree\"\n                                    id=\"Agree\"\n                                    required\n                                />\n                            }\n                            label=\"Agreed to terms and conditions\"\n                        />\n\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            fullWidth\n                        >\n                            Submit\n                        </Button>\n                    </form>\n                </div>\n\n                <div\n                    className=\"payPalContainer\"\n                    style={{\n                        display: payPalDisplay ? 'block' : 'none',\n                    }}\n                >\n                    <p>PayPal is the easiest way to pay online</p>\n                    <button>Login my PayPal</button>\n                    <p>Note:Here are some notes</p>\n                </div>\n\n                <div\n                    className=\"bankAccountDetailContainer\"\n                    style={{\n                        display: bankAccountDisplay ? 'block' : 'none',\n                    }}\n                >\n                    <h2>Bank account Detail</h2>\n                    <h3>Bank:</h3>\n                    <p>The World Bank</p>\n                    <h3>Account Number:</h3>\n                    <p>123123123</p>\n                    <h3>IBAN:</h3>\n                    <p>132132132</p>\n                    <h3>Note:</h3>\n                    <p>Here are some notes.</p>\n                </div>\n            </Container>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useMemo } from 'react';\nimport ProductListItem from './ProductListItem';\nimport CheckoutModule from './Checkout';\nimport fakeData from '../fakeData.json';\nimport '../css/ProductList.css';\n\nimport { Button } from '@material-ui/core';\n\nexport default function ProductList() {\n    const [allProducts, setAllProducts] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [showCheckout, setShowCheckout] = useState(true);\n\n    useEffect(() => {\n        // fetch data\n        fakeData.forEach((e) => (e.quantity = 1));\n        setAllProducts(fakeData);\n        setIsLoaded(true);\n\n        return () => {};\n    }, []);\n\n    const totalPrice = useMemo(() => {\n        return (\n            Math.ceil(\n                allProducts.reduce((prev, cur) => {\n                    return (\n                        prev +\n                        cur.quantity * cur.price * 100 * (1 - cur.discount)\n                    );\n                }, 0)\n            ) / 100\n        );\n    }, [allProducts]);\n\n    // change product quantity\n    const changeProductQuantity = (id, quantity) => {\n        let newAllProducts = allProducts.map((product) => {\n            if (id === product.id) {\n                product.quantity = +quantity;\n            }\n            return product;\n        });\n\n        setAllProducts(newAllProducts);\n    };\n\n    // delete a product\n    const deleteProduct = (id) => {\n        setAllProducts(allProducts.filter((product) => id !== product.id));\n    };\n\n    // loading\n    if (!isLoaded) return <div>loading</div>;\n    // display data\n    return (\n        <div>\n            <table className=\"productList\">\n                <thead>\n                    <tr>\n                        <th>Product</th>\n                        <th>Quantity</th>\n                        <th>Discount</th>\n                        <th>Price</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {allProducts.map((product) => (\n                        <ProductListItem\n                            product={product}\n                            key={product.id}\n                            changeProductQuantity={changeProductQuantity}\n                            deleteProduct={deleteProduct}\n                        />\n                    ))}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>Total: ${totalPrice}</td>\n                        <td></td>\n                    </tr>\n                </tfoot>\n            </table>\n\n            <div className=\"btnBoard\">\n                <Button variant=\"contained\" color=\"primary\">\n                    continue shopping\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        setShowCheckout(!showCheckout);\n                    }}\n                >\n                    checkout\n                </Button>\n            </div>\n            {showCheckout ? (\n                <CheckoutModule setShowCheckout={setShowCheckout} />\n            ) : (\n                ''\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport ProductList from './components/ProductList';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ProductList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}