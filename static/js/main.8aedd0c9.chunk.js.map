{"version":3,"sources":["components/ProductListItem.jsx","components/ProductList.jsx","App.js","serviceWorker.js","index.js"],"names":["ProductListItem","product","changeProductQuantity","deleteProduct","className","src","image","alt","name","description","id","value","quantity","onChange","e","target","price","onClick","window","confirm","ProductList","useState","allProducts","setAllProducts","isLoaded","setIsLoaded","useEffect","fakeData","forEach","newAllProducts","map","filter","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"grCAGe,SAASA,EAAT,GAIX,IAHAC,EAGD,EAHCA,QACAC,EAED,EAFCA,sBACAC,EACD,EADCA,cAgBA,OACI,yBAAKC,UAAU,mBACX,yBAAKC,IAAKJ,EAAQK,MAAOC,IAAI,MAC7B,4BAAKN,EAAQO,MACb,2BAAIP,EAAQQ,aAEZ,4BACID,KAAK,WACLE,GAAG,gBACHC,MAAO,GAAKV,EAAQW,SACpBC,SAxBe,SAACC,GACxBZ,EAAsBD,EAAQS,GAAII,EAAEC,OAAOJ,SAyBnC,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEJ,+BAAKV,EAAQe,MAAQf,EAAQW,UAE7B,4BAAQK,QA5BQ,WAChBC,OAAOC,QAAQ,YACfhB,EAAcF,EAAQS,MA0BtB,UACA,4BAAQO,QAvBS,WACrBf,EAAsBD,EAAQS,GAAI,KAsB9B,Y,iBCpCG,SAASU,IAAe,IAAD,EACIC,mBAAS,IADb,mBAC3BC,EAD2B,KACdC,EADc,OAEFF,oBAAS,GAFP,mBAE3BG,EAF2B,KAEjBC,EAFiB,KAGlCC,qBAAU,WAKN,OAHAC,EAASC,SAAQ,SAACd,GAAD,OAAQA,EAAEF,SAAW,KACtCW,EAAeI,GACfF,GAAY,GACL,eACR,IAGH,IAAIvB,EAAwB,SAACQ,EAAIE,GAC7B,IAAIiB,EAAiBP,EAAYQ,KAAI,SAAC7B,GAIlC,OAHIS,IAAOT,EAAQS,KACfT,EAAQW,SAAWA,GAEhBX,KAGXsB,EAAeM,IAIf1B,EAAgB,SAACO,GACjBa,EAAeD,EAAYS,QAAO,SAAC9B,GAAD,OAAaS,IAAOT,EAAQS,QAIlE,OAAKc,EAGD,6BACI,wBAAIpB,UAAU,eACTkB,EAAYQ,KAAI,SAAC7B,GAAD,OACb,kBAAC,EAAD,CACIA,QAASA,EACT+B,IAAK/B,EAAQS,GACbR,sBAAuBA,EACvBC,cAAeA,SAVb,wCCvBX8B,MARf,WACI,OACI,yBAAK7B,UAAU,OACX,kBAAC,EAAD,QCMQ8B,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8aedd0c9.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/ProductListItem.css';\n\nexport default function ProductListItem({\n    product,\n    changeProductQuantity,\n    deleteProduct,\n}) {\n    let handleQuantityChange = (e) => {\n        changeProductQuantity(product.id, e.target.value);\n    };\n\n    let clickDeleteButton = () => {\n        if (window.confirm('delete?')) {\n            deleteProduct(product.id);\n        }\n    };\n\n    let clickRefreshButton = () => {\n        changeProductQuantity(product.id, 1);\n    };\n\n    return (\n        <div className=\"productListItem\">\n            <img src={product.image} alt=\"?\" />\n            <h1>{product.name}</h1>\n            <p>{product.description}</p>\n\n            <select\n                name=\"quantity\"\n                id=\"item-quantity\"\n                value={'' + product.quantity}\n                onChange={handleQuantityChange}\n            >\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n            </select>\n            <p>${product.price * product.quantity}</p>\n\n            <button onClick={clickDeleteButton}>delete</button>\n            <button onClick={clickRefreshButton}>refresh</button>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport ProductListItem from './ProductListItem';\nimport fakeData from '../fakeData.json';\nimport '../css/ProductList.css';\n\nexport default function ProductList() {\n    const [allProducts, setAllProducts] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    useEffect(() => {\n        // fetch data\n        fakeData.forEach((e) => (e.quantity = 1));\n        setAllProducts(fakeData);\n        setIsLoaded(true);\n        return () => {};\n    }, []);\n\n    // change product quantity\n    let changeProductQuantity = (id, quantity) => {\n        let newAllProducts = allProducts.map((product) => {\n            if (id === product.id) {\n                product.quantity = quantity;\n            }\n            return product;\n        });\n\n        setAllProducts(newAllProducts);\n    };\n\n    // delete a product\n    let deleteProduct = (id) => {\n        setAllProducts(allProducts.filter((product) => id !== product.id));\n    };\n\n    // loading\n    if (!isLoaded) return <div>loading</div>;\n    // display data\n    return (\n        <div>\n            <ul className=\"productList\">\n                {allProducts.map((product) => (\n                    <ProductListItem\n                        product={product}\n                        key={product.id}\n                        changeProductQuantity={changeProductQuantity}\n                        deleteProduct={deleteProduct}\n                    />\n                ))}\n            </ul>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport ProductList from './components/ProductList';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ProductList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}