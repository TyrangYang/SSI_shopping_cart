{"version":3,"sources":["components/ProductListItem.jsx","components/Checkout.jsx","components/ProductList.jsx","App.js","serviceWorker.js","index.js"],"names":["ProductListItem","product","changeProductQuantity","deleteProduct","className","src","image","alt","name","description","id","value","quantity","onChange","e","target","discount","Math","ceil","price","onClick","window","confirm","Checkout","setShowCheckout","useState","formDisplay","payPalDisplay","bankAccountDisplay","cardDisplayOption","setCardDisplayOption","handleSwitchButtonClick","style","display","htmlFor","type","placeholder","required","ProductList","allProducts","setAllProducts","isLoaded","setIsLoaded","showCheckout","useEffect","fakeData","forEach","totalPrice","useMemo","reduce","prev","cur","newAllProducts","map","filter","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffa9b138.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/ProductListItem.css';\n\nexport default function ProductListItem({\n    product,\n    changeProductQuantity,\n    deleteProduct,\n}) {\n    let handleQuantityChange = (e) => {\n        changeProductQuantity(product.id, +e.target.value);\n    };\n\n    let clickDeleteButton = () => {\n        if (window.confirm('delete?')) {\n            deleteProduct(product.id);\n        }\n    };\n\n    let clickRefreshButton = () => {\n        changeProductQuantity(product.id, 1);\n    };\n\n    return (\n        <tr className=\"productListItem\">\n            <td className=\"productContent\">\n                <img src={product.image} alt=\"?\" />\n                <h1>{product.name}</h1>\n                <p>{product.description}</p>\n            </td>\n            <td>\n                <select\n                    name=\"quantity\"\n                    id=\"item-quantity\"\n                    value={'' + product.quantity}\n                    onChange={handleQuantityChange}\n                >\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                </select>\n            </td>\n            <td>\n                <p>\n                    {product.discount === 0\n                        ? 'N/A'\n                        : `${product.discount * 100}%off`}\n                </p>\n            </td>\n            <td>\n                <p>\n                    ${Math.ceil(product.price * product.quantity * 100) / 100}\n                </p>\n            </td>\n            <td>\n                <button onClick={clickDeleteButton}>delete</button>\n                <button onClick={clickRefreshButton}>refresh</button>\n            </td>\n        </tr>\n    );\n}\n","import React, { useState } from 'react';\nimport '../css/checkout.css';\n\nexport default function Checkout({ setShowCheckout }) {\n    const [cardDisplayOption, setCardDisplayOption] = useState({\n        formDisplay: true,\n        payPalDisplay: false,\n        bankAccountDisplay: false,\n    });\n\n    const handleSwitchButtonClick = (e) => {\n        if (e.target.id === 'card1') {\n            setCardDisplayOption({\n                formDisplay: true,\n                payPalDisplay: false,\n                bankAccountDisplay: false,\n            });\n            return;\n        }\n\n        if (e.target.id === 'card2') {\n            setCardDisplayOption({\n                formDisplay: false,\n                payPalDisplay: true,\n                bankAccountDisplay: false,\n            });\n            return;\n        }\n\n        if (e.target.id === 'card3') {\n            setCardDisplayOption({\n                formDisplay: false,\n                payPalDisplay: false,\n                bankAccountDisplay: true,\n            });\n            return;\n        }\n    };\n\n    return (\n        <div\n            className=\"checkoutCardContainer\"\n            onClick={() => {\n                setShowCheckout(false);\n            }}\n        >\n            <div className=\"checkoutCard\">\n                <h1>checkout</h1>\n\n                <ul>\n                    <li\n                        className={\n                            cardDisplayOption.formDisplay ? 'btn1' : 'btn2'\n                        }\n                        onClick={handleSwitchButtonClick}\n                        id=\"card1\"\n                    >\n                        Credit Card\n                    </li>\n                    <li\n                        className={\n                            cardDisplayOption.payPalDisplay ? 'btn1' : 'btn2'\n                        }\n                        onClick={handleSwitchButtonClick}\n                        id=\"card2\"\n                    >\n                        PayPal\n                    </li>\n                    <li\n                        className={\n                            cardDisplayOption.bankAccountDisplay\n                                ? 'btn1'\n                                : 'btn2'\n                        }\n                        onClick={handleSwitchButtonClick}\n                        id=\"card3\"\n                    >\n                        Bank Transfer\n                    </li>\n                </ul>\n\n                <div\n                    className=\"creditCardFormContainer\"\n                    style={{\n                        display: cardDisplayOption.formDisplay\n                            ? 'flex'\n                            : 'none',\n                    }}\n                >\n                    <form>\n                        <div className=\"inputGroup\">\n                            <label htmlFor=\"creditCard-name\">Full Name:</label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Enter FullName\"\n                                name=\"creditCard-name\"\n                                id=\"creditCard-name\"\n                            />\n                        </div>\n\n                        <div className=\"inputGroup\">\n                            <label htmlFor=\"creditCard-card-num\">\n                                Card Name:\n                            </label>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Enter A Card Number\"\n                                name=\"creditCard-card-num\"\n                                id=\"creditCard-card-num\"\n                            />\n                        </div>\n\n                        <div className=\"inputGroup\">\n                            <label htmlFor=\"creditCard-month\">\n                                Expiration:\n                            </label>\n                            <input\n                                type=\"number\"\n                                placeholder=\"MM\"\n                                id=\"creditCard-month\"\n                            />\n                            <input type=\"number\" placeholder=\"YY\" />\n                        </div>\n\n                        <div className=\"inputGroup\">\n                            <label htmlFor=\"creditCard-CCV\">CCV:</label>\n                            <input\n                                type=\"number\"\n                                placeholder=\"CCV\"\n                                name=\"creditCard-CCV\"\n                                id=\"creditCard-CCV\"\n                            />\n                        </div>\n\n                        <div className=\"inputGroup\">\n                            <input\n                                type=\"checkbox\"\n                                name=\"creditCard-Agree\"\n                                id=\"Agree\"\n                                required\n                            />\n                            <label htmlFor=\"Agree\">\n                                Agreed to terms and conditions\n                            </label>\n                        </div>\n\n                        <button className=\"btn1\">Submit</button>\n                    </form>\n                </div>\n\n                <div\n                    className=\"payPalContainer\"\n                    style={{\n                        display: cardDisplayOption.payPalDisplay\n                            ? 'block'\n                            : 'none',\n                    }}\n                >\n                    <p>PayPal is the easiest way to pay online</p>\n                    <button>Login my PayPal</button>\n                    <p>Note:Here are some notes</p>\n                </div>\n\n                <div\n                    className=\"bankAccountDetailContainer\"\n                    style={{\n                        display: cardDisplayOption.bankAccountDisplay\n                            ? 'block'\n                            : 'none',\n                    }}\n                >\n                    <h2>Bank account Detail</h2>\n                    <h3>Bank:</h3>\n                    <p>The World Bank</p>\n                    <h3>Account Number:</h3>\n                    <p>123123123</p>\n                    <h3>IBAN:</h3>\n                    <p>132132132</p>\n                    <h3>Note:</h3>\n                    <p>Here are some notes.</p>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useMemo } from 'react';\nimport ProductListItem from './ProductListItem';\nimport CheckoutModule from './Checkout';\nimport fakeData from '../fakeData.json';\nimport '../css/ProductList.css';\n\nexport default function ProductList() {\n    const [allProducts, setAllProducts] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [showCheckout, setShowCheckout] = useState(false);\n\n    useEffect(() => {\n        // fetch data\n        fakeData.forEach((e) => (e.quantity = 1));\n        setAllProducts(fakeData);\n        setIsLoaded(true);\n\n        return () => {};\n    }, []);\n\n    const totalPrice = useMemo(() => {\n        return (\n            Math.ceil(\n                allProducts.reduce((prev, cur) => {\n                    return (\n                        prev +\n                        cur.quantity * cur.price * 100 * (1 - cur.discount)\n                    );\n                }, 0)\n            ) / 100\n        );\n    }, [allProducts]);\n\n    // change product quantity\n    const changeProductQuantity = (id, quantity) => {\n        let newAllProducts = allProducts.map((product) => {\n            if (id === product.id) {\n                product.quantity = +quantity;\n            }\n            return product;\n        });\n\n        setAllProducts(newAllProducts);\n    };\n\n    // delete a product\n    const deleteProduct = (id) => {\n        setAllProducts(allProducts.filter((product) => id !== product.id));\n    };\n\n    // loading\n    if (!isLoaded) return <div>loading</div>;\n    // display data\n    return (\n        <div>\n            <table className=\"productList\">\n                <thead>\n                    <tr>\n                        <th>Product</th>\n                        <th>Quantity</th>\n                        <th>Discount</th>\n                        <th>Price</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {/* <sdiv className=\"productList\"> */}\n                    {allProducts.map((product) => (\n                        <ProductListItem\n                            product={product}\n                            key={product.id}\n                            changeProductQuantity={changeProductQuantity}\n                            deleteProduct={deleteProduct}\n                        />\n                    ))}\n                    {/* </div> */}\n                </tbody>\n                <tfoot>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>Total: ${totalPrice}</td>\n                        <td></td>\n                    </tr>\n                </tfoot>\n            </table>\n\n            <div className=\"btnBoard\">\n                <button>continue shopping</button>\n                <button\n                    onClick={() => {\n                        setShowCheckout(!showCheckout);\n                    }}\n                >\n                    checkout\n                </button>\n            </div>\n            {showCheckout ? (\n                <CheckoutModule setShowCheckout={setShowCheckout} />\n            ) : (\n                ''\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport ProductList from './components/ProductList';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ProductList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}